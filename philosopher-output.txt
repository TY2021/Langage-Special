デッドロック
$ spin -a Diner.pml
$ gcc -o pan pan.c
$ ./pan
pan:1: invalid end state (at depth 20) <- デッドロックのエラー
pan: wrote Diner.pml.trail
------略-------

pan:1: invalid end state (at depth 20)で、無効な状態があるというエラーである。
そのため、無効な状態になる状況を実行・トレースしてみる。

$ spin Diner.pml
          Philosopher0 is eating.
              Philosopher1 is eating.
                  Philosopher2 is eating.
                      Philosopher3 is eating.
                          Philosopher4 is eating.
          Philosopher0 is eating.
          Philosopher0 is eating.
      timeout
#processes: 6
		fork[0] = BUSY
		fork[1] = BUSY
		fork[2] = BUSY
		fork[3] = BUSY
		fork[4] = BUSY
114:	proc  5 (philosopher:1) Diner.pml:20 (state 11)
114:	proc  4 (philosopher:1) Diner.pml:20 (state 11)
114:	proc  3 (philosopher:1) Diner.pml:20 (state 11)
114:	proc  2 (philosopher:1) Diner.pml:20 (state 11)
114:	proc  1 (philosopher:1) Diner.pml:20 (state 11)
114:	proc  0 (:init::1) Diner.pml:41 (state 9) <valid end state>
6 processes created

$ spin -p -t  Diner.pml
using statement merging
  1:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 1
  2:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  3:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
  4:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 2
  5:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  6:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
  7:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 3
  8:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  9:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 10:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 4
 11:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
 12:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 13:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 5
 14:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
 15:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 16:	proc  0 (:init::1) Diner.pml:37 (state 4)	[((proc>=5))]
 17:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 17:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 17:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 18:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 18:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 18:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 18:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 19:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 20:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 21:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 22:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 22:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 22:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 23:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 23:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 23:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 24:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 24:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 24:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 24:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 25:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 26:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 ------略-------

spin: trail ends after 226 steps
#processes: 6
		fork[0] = BUSY
		fork[1] = BUSY
		fork[2] = BUSY
		fork[3] = BUSY
		fork[4] = BUSY
226:	proc  5 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  4 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  3 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  2 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  1 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  0 (:init::1) Diner.pml:40 (state 9) <valid end state>
6 processes created

146:	proc  1 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
202:	proc  2 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
218:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
224:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
226:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
により、全ての哲学者が右手にフォークを持ち左手のフォークを取得するための待ち状態になる。
そのためこのプログラムはデッドロックになる。

ライブロック
右手のフォークを先に取り、左手のフォークの処理を以下のようにした。
:: fork[left] == BUSY -> fork[right] = FREE;
:: else -> progress: fork[left] = BUSY; state = EATING; printf("Philosopher%d is eating.\n",id); fork[left] = FREE; fork[right] = FREE; state = THINKING

これは食事する部分をprogressにし、その部分を通るかどうかを検査する形式である。
この検証結果を以下に示す。

$ spin -a Diner1.pml
$ gcc -DNP -o pan pan.c
$ ./pan -l
pan:1: non-progress cycle (at depth 34) <- ライブロックのエラー
pan: wrote Diner1.pml.trail
------略-------

pan:1: non-progress cycle (at depth 34)は、
プログラムの中でprogressの部分を通らない（処理が行われない）場合があるというエラーである。
そのため、その状況をトレースしてみる。

$ spin Diner1.pml
Philosopher3 is eating.
    Philosopher4 is eating.
    Philosopher4 is eating.
------略-------
Philosopher1 is eating.
Philosopher1 is eating.
            Philosopher4 is eating.
------略-------
Philosopher0 is eating.
                          Philosopher4 is eating.
                  Philosopher2 is eating.
                  Philosopher2 is eating.
          Philosopher0 is eating.
                          Philosopher4 is eating.
              Philosopher1 is eating.
                      Philosopher3 is eating.
                  Philosopher2 is eating.
                          Philosopher4 is eating.
          Philosopher0 is eating.
              Philosopher1 is eating.
                      Philosopher3 is eating.
              Philosopher1 is eating.
                          Philosopher4 is eating.
                  Philosopher2 is eating.
          Philosopher0 is eating.
              Philosopher1 is eating.
                          Philosopher4 is eating.
                  Philosopher2 is eating.
          Philosopher0 is eating.
                      Philosopher3 is eating.
                      Philosopher3 is eating.
              Philosopher1 is eating.
                          Philosopher4 is eating.
              Philosopher1 is eating.
                  Philosopher2 is eating.
          Philosopher0 is eating.



$ spin -p -t Diner1.pml
starting claim 2
spin: couldn't find claim 2 (ignored)
using statement merging
  2:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 2
  4:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
  6:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
  8:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 3
 10:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 12:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 14:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 4
 16:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 18:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 20:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 5
 22:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 24:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 26:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 6
 28:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 30:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 32:	proc  0 (:init::1) Diner1.pml:38 (state 4)	[((proc>=5))]
 34:	proc  5 (philosopher:1) Diner1.pml:15 (state 1)	[((fork[right]==FREE))]
 34:	proc  5 (philosopher:1) Diner1.pml:15 (state 2)	[fork[right] = BUSY]
 34:	proc  5 (philosopher:1) Diner1.pml:18 (state 6)	[state = HUNGRY]
  <<<<<START OF CYCLE>>>>>
 36:	proc  5 (philosopher:1) Diner1.pml:21 (state 7)	[((fork[left]!=BUSY))]
 36:	proc  5 (philosopher:1) Diner1.pml:21 (state 8)	[fork[left] = BUSY]
 36:	proc  5 (philosopher:1) Diner1.pml:25 (state 14)	[state = EATING]
                              Philosopher4 is eating.
 36:	proc  5 (philosopher:1) Diner1.pml:26 (state 15)	[printf('Philosopher%d is eating.\\n',id)]
 38:	proc  5 (philosopher:1) Diner1.pml:27 (state 16)	[fork[left] = FREE]
 40:	proc  5 (philosopher:1) Diner1.pml:28 (state 17)	[fork[right] = FREE]
 42:	proc  5 (philosopher:1) Diner1.pml:29 (state 18)	[state = THINKING]
 44:	proc  5 (philosopher:1) Diner1.pml:15 (state 1)	[((fork[right]==FREE))]
 44:	proc  5 (philosopher:1) Diner1.pml:15 (state 2)	[fork[right] = BUSY]
 44:	proc  5 (philosopher:1) Diner1.pml:18 (state 6)	[state = HUNGRY]
spin: trail ends after 44 steps
#processes: 6
		fork[0] = FREE
		fork[1] = FREE
		fork[2] = FREE
		fork[3] = FREE
		fork[4] = BUSY
 44:	proc  5 (philosopher:1) Diner1.pml:19 (state 13)
 44:	proc  4 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  3 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  2 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  1 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  0 (:init::1) Diner1.pml:41 (state 9) <valid end state>
6 processes created

単純に実行して見ると、哲学者1や4が食事を独占している部分がある。
さらに、トレースの結果からは、
<<<<<START OF CYCLE>>>>>からの動作を見ると、proc 5以外動作が見られない。
proc 5でループが生じ、proc 5でフォークの動作が繰り返される。
これは他のprocで処理が行われない部分があるということを示す。
そのため、このプログラムは何種かのprocで動作が行われない部分があり、無限ループに陥る。
これはライブロックに該当する。

デッドロック・ライブロック両方発生しない
$ spin -a Diner2.pml
$ gcc -o pan pan.c
$ ./pan
(Spin Version 6.4.8 -- 2 March 2018)
	+ Partial Order Reduction

Full statespace search for:
	never claim         	- (none specified)
	assertion violations	+
	acceptance   cycles 	- (not selected)
	invalid end states	+

State-vector 140 byte, depth reached 1678, errors: 0

$ spin -a Diner2.pml
$ gcc -DNP -o pan pan.c
$ ./pan -l

(Spin Version 6.4.8 -- 2 March 2018)
	+ Partial Order Reduction

Full statespace search for:
	never claim         	+ (:np_:)
	assertion violations	+ (if within scope of claim)
	non-progress cycles 	+ (fairness disabled)
	invalid end states	- (disabled by never claim)

State-vector 148 byte, depth reached 3667, errors: 0

到達性・進行性の検証でエラーは出なかった。
プログラムの動作を以下に示す。

$ spin Diner2.pml
Philosopher0 is eating.
                     Philosopher3 is eating.
                 Philosopher2 is eating.
                         Philosopher4 is eating.
                 Philosopher2 is eating.
                     Philosopher3 is eating.
         Philosopher0 is eating.
                         Philosopher4 is eating.
             Philosopher1 is eating.
                         Philosopher4 is eating.
         Philosopher0 is eating.
             Philosopher1 is eating.
                     Philosopher3 is eating.
                         Philosopher4 is eating.
         Philosopher0 is eating.
                 Philosopher2 is eating.
                     Philosopher3 is eating.
             Philosopher1 is eating.
                         Philosopher4 is eating.
         Philosopher0 is eating.
                 Philosopher2 is eating.
             Philosopher1 is eating.
                     Philosopher3 is eating.
         Philosopher0 is eating.
                 Philosopher2 is eating.
                         Philosopher4 is eating.
                     Philosopher3 is eating.
         Philosopher0 is eating.
             Philosopher1 is eating.
                         Philosopher4 is eating.
         Philosopher0 is eating.
                 Philosopher2 is eating.
                     Philosopher3 is eating.
             Philosopher1 is eating.
                         Philosopher4 is eating.
             Philosopher1 is eating.
                     Philosopher3 is eating.
             Philosopher1 is eating.
         Philosopher0 is eating.

上記のように、各哲学者が均等に食事ができており、
デッドロックもライブロックも発生しないプログラムが実行されていることが分かる。


図6.1
- fn x:'A -> 'B => fn z:'B -> 'C => fn y:'A => z(x y);
val it = fn : ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c

問6.1
1)
- fn f:'N -> 'A => fn x:'N => (f x);
val it = fn : ('a -> 'b) -> 'a -> 'b

2)
- fn f:'N -> 'N => fn x:'N => (f(f x));
val it = fn : ('a -> 'a) -> 'a -> 'a

問6.2
1)
- fn f:'N -> 'A => fn x:'N => (f x);
val it = fn : ('a -> 'b) -> 'a -> 'b

2)
- fn x:'A -> 'B => fn z:'B -> 'C => fn y:'A => z(x y);
val it = fn : ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c
