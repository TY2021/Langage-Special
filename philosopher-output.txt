デッドロック
$ spin -a Diner.pml
$ gcc -o pan pan.c
$ ./pan
pan:1: invalid end state (at depth 20) <- デッドロックのエラー
pan: wrote Diner.pml.trail
------略-------

pan:1: invalid end state (at depth 20)で、無効な状態があるというエラーである。
そのため、無効な状態になる状況をトレースしてみる。

$ spin -p -t  Diner.pml
using statement merging
  1:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 1
  2:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  3:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
  4:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 2
  5:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  6:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
  7:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 3
  8:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
  9:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 10:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 4
 11:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
 12:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 13:	proc  0 (:init::1) Diner.pml:35 (state 1)	[((proc<5))]
Starting philosopher with pid 5
 14:	proc  0 (:init::1) Diner.pml:36 (state 2)	[(run philosopher(proc))]
 15:	proc  0 (:init::1) Diner.pml:36 (state 3)	[proc = (proc+1)]
 16:	proc  0 (:init::1) Diner.pml:37 (state 4)	[((proc>=5))]
 17:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 17:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 17:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 18:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 18:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 18:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 18:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 19:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 20:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 21:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 22:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 22:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 22:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 23:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 23:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 23:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 24:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 24:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 24:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 24:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 25:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 26:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 27:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 28:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 28:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 28:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 28:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 29:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 30:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 31:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 32:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 32:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 32:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 33:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 33:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 33:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 34:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 34:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 34:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 34:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 35:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 36:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 37:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 37:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 37:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 38:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 39:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 39:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 39:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 40:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 40:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 40:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
 40:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 41:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 42:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 43:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 44:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 44:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 44:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 44:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 45:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 46:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 47:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 48:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 48:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 48:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 48:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 49:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 50:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 51:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 52:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 52:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 52:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 53:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 53:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 53:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 53:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 54:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 55:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 56:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 56:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 56:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 57:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 57:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 57:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 58:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 58:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 58:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 58:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 59:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 60:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 61:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 61:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 61:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
 61:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 62:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 63:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 64:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 64:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 64:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 65:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 65:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 65:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 65:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 66:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 67:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 68:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 68:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 68:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 69:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 70:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 71:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 72:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 72:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 72:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 72:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 73:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 73:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 73:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 74:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 75:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 76:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 77:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 77:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 77:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 77:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 78:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 79:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 80:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 81:	proc  2 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 81:	proc  2 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 81:	proc  2 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 82:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 83:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 83:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 83:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 84:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 84:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 84:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 84:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 85:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 86:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 87:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 87:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 87:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 88:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 89:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 89:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 89:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 90:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 90:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 90:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
 90:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 91:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 92:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 93:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
 93:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
 93:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
 93:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
 94:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
 95:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
 96:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 97:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 97:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 97:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
 98:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
 99:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
 99:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
 99:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
100:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
100:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
100:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
100:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
101:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
102:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
103:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
103:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
103:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
104:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
105:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
105:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
105:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
106:	proc  2 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
106:	proc  2 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
106:	proc  2 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
              Philosopher1 is eating.
106:	proc  2 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
107:	proc  2 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
108:	proc  2 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
109:	proc  2 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
110:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
110:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
110:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
110:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
111:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
112:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
113:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
114:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
114:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
114:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
114:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
115:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
116:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
117:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
118:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
118:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
118:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
118:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
119:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
120:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
121:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
122:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
122:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
122:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
123:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
123:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
123:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
123:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
124:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
125:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
126:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
126:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
126:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
127:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
128:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
128:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
128:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
129:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
129:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
129:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
129:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
130:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
131:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
132:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
132:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
132:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
133:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
134:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
134:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
134:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
134:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
135:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
136:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
137:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
137:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
137:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
137:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
138:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
138:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
138:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
139:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
140:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
141:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
142:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
142:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
142:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
142:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
143:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
144:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
145:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
146:	proc  1 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
146:	proc  1 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
146:	proc  1 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
147:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
148:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
148:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
148:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
149:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
149:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
149:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
149:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
150:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
151:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
152:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
152:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
152:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
153:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
154:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
154:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
154:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
155:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
155:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
155:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
155:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
156:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
157:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
158:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
158:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
158:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
158:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
159:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
160:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
161:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
162:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
162:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
162:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
163:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
164:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
164:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
164:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
165:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
165:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
165:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
165:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
166:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
167:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
168:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
168:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
168:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
169:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
170:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
170:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
170:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
171:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
171:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
171:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
171:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
172:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
173:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
174:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
174:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
174:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
174:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
175:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
176:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
177:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
178:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
178:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
178:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
178:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
179:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
180:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
181:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
181:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
181:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
182:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
183:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
183:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
183:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
183:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
184:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
185:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
186:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
186:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
186:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
187:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
187:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
187:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
188:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
189:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
189:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
189:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
189:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
190:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
191:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
192:	proc  3 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
192:	proc  3 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
192:	proc  3 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                  Philosopher2 is eating.
192:	proc  3 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
193:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
194:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
195:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
195:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
195:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
196:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
196:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
196:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
196:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
197:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
198:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
199:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
199:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
199:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
200:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
201:	proc  3 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
202:	proc  2 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
202:	proc  2 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
202:	proc  2 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
203:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
203:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
203:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
204:	proc  3 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
205:	proc  3 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
206:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
206:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
206:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
206:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
207:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
208:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
209:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
210:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
210:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
210:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
210:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
211:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
212:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
213:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
214:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
214:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
214:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
215:	proc  4 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
215:	proc  4 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
215:	proc  4 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                      Philosopher3 is eating.
215:	proc  4 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
216:	proc  4 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
217:	proc  4 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
218:	proc  3 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
218:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
218:	proc  3 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
219:	proc  4 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
220:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
220:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
220:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
221:	proc  5 (philosopher:1) Diner.pml:21 (state 7)	[((fork[left]==FREE))]
221:	proc  5 (philosopher:1) Diner.pml:21 (state 8)	[fork[left] = BUSY]
221:	proc  5 (philosopher:1) Diner.pml:24 (state 12)	[state = EATING]
                          Philosopher4 is eating.
221:	proc  5 (philosopher:1) Diner.pml:25 (state 13)	[printf('Philosopher%d is eating.\\n',id)]
222:	proc  5 (philosopher:1) Diner.pml:26 (state 14)	[fork[left] = FREE]
223:	proc  5 (philosopher:1) Diner.pml:27 (state 15)	[fork[right] = FREE]
224:	proc  4 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
224:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
224:	proc  4 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]
225:	proc  5 (philosopher:1) Diner.pml:28 (state 16)	[state = THINKING]
226:	proc  5 (philosopher:1) Diner.pml:15 (state 1)	[((fork[right]==FREE))]
226:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
226:	proc  5 (philosopher:1) Diner.pml:18 (state 6)	[state = HUNGRY]

spin: trail ends after 226 steps
#processes: 6
		fork[0] = BUSY
		fork[1] = BUSY
		fork[2] = BUSY
		fork[3] = BUSY
		fork[4] = BUSY
226:	proc  5 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  4 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  3 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  2 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  1 (philosopher:1) Diner.pml:19 (state 11)
226:	proc  0 (:init::1) Diner.pml:40 (state 9) <valid end state>
6 processes created

146:	proc  1 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
202:	proc  2 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
218:	proc  3 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
224:	proc  4 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
------略-------
226:	proc  5 (philosopher:1) Diner.pml:15 (state 2)	[fork[right] = BUSY]
により、全ての哲学者が右手にフォークを持ち左手のフォークを取得するための待ち状態になる。
そのためこのプログラムはデッドロックになる。

ライブロック
$ spin -a Diner1.pml
$ gcc -DNP -o pan pan.c
$ ./pan -l
pan:1: non-progress cycle (at depth 34) <- ライブロックのエラー
pan: wrote Diner1.pml.trail
------略-------

pan:1: non-progress cycle (at depth 34)は、
プログラムの中で無限に通らない（処理が行われない）部分があるというエラーである。
そのため、その状況をトレースしてみる。

$ spin -p -t Diner1.pml
starting claim 2
spin: couldn't find claim 2 (ignored)
using statement merging
  2:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 2
  4:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
  6:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
  8:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 3
 10:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 12:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 14:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 4
 16:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 18:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 20:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 5
 22:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 24:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 26:	proc  0 (:init::1) Diner1.pml:36 (state 1)	[((proc<5))]
Starting philosopher with pid 6
 28:	proc  0 (:init::1) Diner1.pml:37 (state 2)	[(run philosopher(proc))]
 30:	proc  0 (:init::1) Diner1.pml:37 (state 3)	[proc = (proc+1)]
 32:	proc  0 (:init::1) Diner1.pml:38 (state 4)	[((proc>=5))]
 34:	proc  5 (philosopher:1) Diner1.pml:15 (state 1)	[((fork[right]==FREE))]
 34:	proc  5 (philosopher:1) Diner1.pml:15 (state 2)	[fork[right] = BUSY]
 34:	proc  5 (philosopher:1) Diner1.pml:18 (state 6)	[state = HUNGRY]
  <<<<<START OF CYCLE>>>>>
 36:	proc  5 (philosopher:1) Diner1.pml:21 (state 7)	[((fork[left]!=BUSY))]
 36:	proc  5 (philosopher:1) Diner1.pml:21 (state 8)	[fork[left] = BUSY]
 36:	proc  5 (philosopher:1) Diner1.pml:25 (state 14)	[state = EATING]
                              Philosopher4 is eating.
 36:	proc  5 (philosopher:1) Diner1.pml:26 (state 15)	[printf('Philosopher%d is eating.\\n',id)]
 38:	proc  5 (philosopher:1) Diner1.pml:27 (state 16)	[fork[left] = FREE]
 40:	proc  5 (philosopher:1) Diner1.pml:28 (state 17)	[fork[right] = FREE]
 42:	proc  5 (philosopher:1) Diner1.pml:29 (state 18)	[state = THINKING]
 44:	proc  5 (philosopher:1) Diner1.pml:15 (state 1)	[((fork[right]==FREE))]
 44:	proc  5 (philosopher:1) Diner1.pml:15 (state 2)	[fork[right] = BUSY]
 44:	proc  5 (philosopher:1) Diner1.pml:18 (state 6)	[state = HUNGRY]
spin: trail ends after 44 steps
#processes: 6
		fork[0] = FREE
		fork[1] = FREE
		fork[2] = FREE
		fork[3] = FREE
		fork[4] = BUSY
 44:	proc  5 (philosopher:1) Diner1.pml:19 (state 13)
 44:	proc  4 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  3 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  2 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  1 (philosopher:1) Diner1.pml:12 (state 19)
 44:	proc  0 (:init::1) Diner1.pml:41 (state 9) <valid end state>
6 processes created

<<<<<START OF CYCLE>>>>>からの動作を見ると、proc 5以外動作が見られない。
proc 5で無限ループが生じ、proc 5でフォークの動作が繰り返される。
これは他のprocで処理が行われない部分があるということを示す。
そのため、このプログラムは何種かのprocで動作が行われない部分があり、無限ループに陥る。
これはライブロックに該当する。

図6.1
- fn x:'A -> 'B => fn z:'B -> 'C => fn y:'A => z(x y);
val it = fn : ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c

問6.1
1)
- fn f:'N -> 'A => fn x:'N => (f x);
val it = fn : ('a -> 'b) -> 'a -> 'b

2)
- fn f:'N -> 'N => fn x:'N => (f(f x));
val it = fn : ('a -> 'a) -> 'a -> 'a

問6.2
1)
- fn f:'N -> 'A => fn x:'N => (f x);
val it = fn : ('a -> 'b) -> 'a -> 'b

2)
- fn x:'A -> 'B => fn z:'B -> 'C => fn y:'A => z(x y);
val it = fn : ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c
